package com.taotao.cart.service.impl;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.taotao.cart.redis.RedisUtils;
import com.taotao.cart.service.CartService;
import com.taotao.manager.pojo.Cart;

@Service
public class CartServiceImpl implements CartService {

	private static final ObjectMapper MAPPER = new ObjectMapper();

	@Autowired
	private RedisUtils redisUtils;

	@Value("${TAOTAO_CART_KEY}")
	private String TAOTAO_CART_KEY;

	@Override
	public void addItemByCart(Long userId, Long itemId, Integer num) {
		// 查询用户原来的购物车
		List<Cart> list = this.queryCartByUserId(userId);

		// 声明容器用来存放符合条件的购物车
		Cart cart = null;

		// 遍历购物车
		for (Cart c : list) {
			// 判断新添加的商品在购物车中是否存在
			if (itemId == c.getItemId()) {
				// 如果新添加得商品在购物车中存在，赋值
				cart = c;

				// 跳出循环
				break;
			}
		}

		// 判断购物车中是否存在新添加的商品

		// 如果存在则商品数量相加

		// 如果不存在则添加商品到购物车中

		// 把修改后的购物车保存到redis中

	}

	public static void main(String[] args) {
		Long a = 128l;
		Long aa = 128l;

		Integer b = 128;
		Integer bb = 128;

		System.out.println(a == aa);
		System.out.println(b == bb);
		System.out.println(a.longValue() == aa.longValue());
		System.out.println(b.intValue() == bb.intValue());
	}

	@Override
	public List<Cart> queryCartByUserId(Long userId) {
		// 根据用户id从redis中查询购物车数据，查询到的是json格式数据
		// 需要给key添加前缀，为了方便维护和管理redis
		String json = this.redisUtils.get(this.TAOTAO_CART_KEY + userId);

		// 判断json数据不为空
		if (StringUtils.isNotBlank(json)) {
			try {
				// 如果不为空，把json格式转为List<Cart>集合
				List<Cart> list = MAPPER.readValue(json,
						MAPPER.getTypeFactory().constructCollectionType(List.class, Cart.class));

				// 返回购物车
				return list;
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		// 如果查询的结果为空，不能返回null，否则遍历的时候会空指针异常
		// 可以返回空集合
		return new ArrayList<>();
	}

}
