package com.taotao.item.message;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.TextMessage;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import freemarker.template.Configuration;

public class HtmlMessageListener implements MessageListener {

	private static final ObjectMapper MAPPER = new ObjectMapper();

	@Override
	public void onMessage(Message message) {
		// 判断消息的类型是否是TextMessage
		if (message instanceof TextMessage) {
			// 如果是TextMessage，强转
			TextMessage textMessage = (TextMessage) message;

			try {
				// 获取消息内容{type：save，itemId：123}
				String json = textMessage.getText();

				// 判断json数据不为空
				if (StringUtils.isNotBlank(json)) {
					// 直接解析json数据
					JsonNode jsonNode = MAPPER.readTree(json);

					// 获取操作符type
					String type = jsonNode.get("type").asText();
					// 获取商品id
					long itemId = jsonNode.get("itemId").asLong();

					// 根据消息内容生成静态页面
					if ("save".equals(type)) {
						// 如果是新增，根据商品id创建静态页面
						this.genHtml(itemId);
					}

				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
	}

	@Autowired
	private FreeMarkerConfigurer freeMarkerConfigurer;

	private void genHtml(long itemId) {
		// 获取FreeMarker的核心对象
		Configuration cfg = this.freeMarkerConfigurer.getConfiguration();

	}

}
