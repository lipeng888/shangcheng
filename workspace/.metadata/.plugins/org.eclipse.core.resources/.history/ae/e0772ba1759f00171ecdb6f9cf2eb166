package com.taotao.portal.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taotao.cart.service.CartService;
import com.taotao.manager.pojo.Cart;
import com.taotao.manager.pojo.Order;
import com.taotao.manager.pojo.User;
import com.taotao.order.service.OrderService;
import com.taotao.sso.service.UserService;

@Controller
@RequestMapping("order")
public class OrderController {

	@Value("${TT_TICKET}")
	private String TT_TICKET;

	@Autowired
	private UserService userService;

	@Autowired
	private OrderService orderService;

	@Autowired
	private CartService cartService;

	// http://www.taotao.com/order/create.html
	/**
	 * 跳转到订单确认页面
	 * 
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping("create")
	public String create(Model model, HttpServletRequest request) {
		// 获取用户登录信息
		// 从cookie中获取ticket
		// String ticket = CookieUtils.getCookieValue(request, this.TT_TICKET,
		// true);
		// 使用单点登录服务，通过ticket查询用户登录信息
		// User user = this.userService.queryUserByTicket(ticket);

		// 直接从request中获取user
		User user = (User) request.getAttribute("user");

		// 判断用户是否登录
		// if (user != null) {
		// 如果登录，使用用户id查询该用户的购物车数据
		List<Cart> carts = this.cartService.queryCartByUserId(user.getId());

		// 把购物车数据放到Model，传递给前台页面
		model.addAttribute("carts", carts);
		// }

		return "order-cart";
	}

	// type : "POST",
	// dataType : "json",
	// url : "/service/order/submit",
	// if(result.status == 200)
	// location.href = "/order/success.html?id="+result.data;
	@RequestMapping(value = "submit", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> saveOrder(Order order) {
		// 查询用户登录信息

		// 把用户登录信息设置到订单对象中

		// 调用订单服务保存订单数据

		// 封装返回数据
		// result.status = 200
		// result.data=订单id
	}

}
